Traceback (most recent call last):
  File "/opt/conda/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/opt/conda/lib/python3.9/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/conda/lib/python3.9/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/opt/conda/lib/python3.9/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/opt/conda/lib/python3.9/asyncio/base_events.py", line 647, in run_until_complete
    return future.result()
  File "/opt/conda/lib/python3.9/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/opt/conda/lib/python3.9/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/conda/lib/python3.9/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# This is the scikit-learn equivalent way of doing what we did in class. 
# I've include the code here to get you started. Look through the links above 
# for documentation on each of the pieces!

from sklearn.linear_model import LinearRegression
from sklearn.model_selection import TimeSeriesSplit, cross_validate
from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import PolynomialFeatures

# Make a pipeline where we first generate quadratic polynomial features from the time data
# then fit using linear regression
model = make_pipeline(PolynomialFeatures(2), LinearRegression())

# Evaluate the model by generate 5 different train/val splits using TimseSeriesSplit,
# fitting the model from above on each train, and evaluating the MAE for the validation in each
cross_validate(
    model,
    df_trainval["decimal"].values.reshape(-1, 1), # The date in decimal format, X
    df_trainval["ppm"].values, # the CO2 concentration in ppm, y
    cv=TimeSeriesSplit(),
    scoring=["neg_mean_absolute_error", "neg_root_mean_squared_error"],
)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mNameError[0m                                 Traceback (most recent call last)
Input [0;32mIn [1][0m, in [0;36m<cell line: 16>[0;34m()[0m
[1;32m     12[0m model [38;5;241m=[39m make_pipeline(PolynomialFeatures([38;5;241m2[39m), LinearRegression())
[1;32m     14[0m [38;5;66;03m# Evaluate the model by generate 5 different train/val splits using TimseSeriesSplit,[39;00m
[1;32m     15[0m [38;5;66;03m# fitting the model from above on each train, and evaluating the MAE for the validation in each[39;00m
[1;32m     16[0m cross_validate(
[1;32m     17[0m     model,
[0;32m---> 18[0m     [43mdf_trainval[49m[[38;5;124m"[39m[38;5;124mdecimal[39m[38;5;124m"[39m][38;5;241m.[39mvalues[38;5;241m.[39mreshape([38;5;241m-[39m[38;5;241m1[39m, [38;5;241m1[39m), [38;5;66;03m# The date in decimal format, X[39;00m
[1;32m     19[0m     df_trainval[[38;5;124m"[39m[38;5;124mppm[39m[38;5;124m"[39m][38;5;241m.[39mvalues, [38;5;66;03m# the CO2 concentration in ppm, y[39;00m
[1;32m     20[0m     cv[38;5;241m=[39mTimeSeriesSplit(),
[1;32m     21[0m     scoring[38;5;241m=[39m[[38;5;124m"[39m[38;5;124mneg_mean_absolute_error[39m[38;5;124m"[39m, [38;5;124m"[39m[38;5;124mneg_root_mean_squared_error[39m[38;5;124m"[39m],
[1;32m     22[0m )

[0;31mNameError[0m: name 'df_trainval' is not defined
NameError: name 'df_trainval' is not defined

