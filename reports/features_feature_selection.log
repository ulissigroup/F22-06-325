Traceback (most recent call last):
  File "/opt/conda/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/opt/conda/lib/python3.9/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/conda/lib/python3.9/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/opt/conda/lib/python3.9/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/opt/conda/lib/python3.9/asyncio/base_events.py", line 647, in run_until_complete
    return future.result()
  File "/opt/conda/lib/python3.9/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/opt/conda/lib/python3.9/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/conda/lib/python3.9/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
from scipy.optimize import minimize


# Sum squared error loss function!
def loss(theta, X, y, alpha=1):
    y_pred = X @ theta
    loss = sum((y - y_pred) ** 2) + alpha * np.abs(theta)
    return loss


# Linear regression fit using scipy.optimize.minimize, showing you get the same answer using either method!
sol = minimize(
    loss,
    np.ones(model[1].coef_.shape),
    args=(PolynomialFeatures(4).fit_transform(X_train), y_train, 0.1),
)
print(sol.x)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mValueError[0m                                Traceback (most recent call last)
File [0;32m/opt/conda/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py:141[0m, in [0;36mScalarFunction.__init__.<locals>.fun_wrapped[0;34m(x)[0m
[1;32m    140[0m [38;5;28;01mtry[39;00m:
[0;32m--> 141[0m     fx [38;5;241m=[39m [43mnp[49m[38;5;241;43m.[39;49m[43masarray[49m[43m([49m[43mfx[49m[43m)[49m[38;5;241;43m.[39;49m[43mitem[49m[43m([49m[43m)[49m
[1;32m    142[0m [38;5;28;01mexcept[39;00m ([38;5;167;01mTypeError[39;00m, [38;5;167;01mValueError[39;00m) [38;5;28;01mas[39;00m e:

[0;31mValueError[0m: can only convert an array of size 1 to a Python scalar

The above exception was the direct cause of the following exception:

[0;31mValueError[0m                                Traceback (most recent call last)
Input [0;32mIn [18][0m, in [0;36m<cell line: 12>[0;34m()[0m
[1;32m      8[0m     [38;5;28;01mreturn[39;00m loss
[1;32m     11[0m [38;5;66;03m# Linear regression fit using scipy.optimize.minimize, showing you get the same answer using either method![39;00m
[0;32m---> 12[0m sol [38;5;241m=[39m [43mminimize[49m[43m([49m
[1;32m     13[0m [43m    [49m[43mloss[49m[43m,[49m
[1;32m     14[0m [43m    [49m[43mnp[49m[38;5;241;43m.[39;49m[43mones[49m[43m([49m[43mmodel[49m[43m[[49m[38;5;241;43m1[39;49m[43m][49m[38;5;241;43m.[39;49m[43mcoef_[49m[38;5;241;43m.[39;49m[43mshape[49m[43m)[49m[43m,[49m
[1;32m     15[0m [43m    [49m[43margs[49m[38;5;241;43m=[39;49m[43m([49m[43mPolynomialFeatures[49m[43m([49m[38;5;241;43m4[39;49m[43m)[49m[38;5;241;43m.[39;49m[43mfit_transform[49m[43m([49m[43mX_train[49m[43m)[49m[43m,[49m[43m [49m[43my_train[49m[43m,[49m[43m [49m[38;5;241;43m0.1[39;49m[43m)[49m[43m,[49m
[1;32m     16[0m [43m)[49m
[1;32m     17[0m [38;5;28mprint[39m(sol[38;5;241m.[39mx)

File [0;32m/opt/conda/lib/python3.9/site-packages/scipy/optimize/_minimize.py:694[0m, in [0;36mminimize[0;34m(fun, x0, args, method, jac, hess, hessp, bounds, constraints, tol, callback, options)[0m
[1;32m    692[0m     res [38;5;241m=[39m _minimize_cg(fun, x0, args, jac, callback, [38;5;241m*[39m[38;5;241m*[39moptions)
[1;32m    693[0m [38;5;28;01melif[39;00m meth [38;5;241m==[39m [38;5;124m'[39m[38;5;124mbfgs[39m[38;5;124m'[39m:
[0;32m--> 694[0m     res [38;5;241m=[39m [43m_minimize_bfgs[49m[43m([49m[43mfun[49m[43m,[49m[43m [49m[43mx0[49m[43m,[49m[43m [49m[43margs[49m[43m,[49m[43m [49m[43mjac[49m[43m,[49m[43m [49m[43mcallback[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43moptions[49m[43m)[49m
[1;32m    695[0m [38;5;28;01melif[39;00m meth [38;5;241m==[39m [38;5;124m'[39m[38;5;124mnewton-cg[39m[38;5;124m'[39m:
[1;32m    696[0m     res [38;5;241m=[39m _minimize_newtoncg(fun, x0, args, jac, hess, hessp, callback,
[1;32m    697[0m                              [38;5;241m*[39m[38;5;241m*[39moptions)

File [0;32m/opt/conda/lib/python3.9/site-packages/scipy/optimize/_optimize.py:1283[0m, in [0;36m_minimize_bfgs[0;34m(fun, x0, args, jac, callback, gtol, norm, eps, maxiter, disp, return_all, finite_diff_rel_step, **unknown_options)[0m
[1;32m   1280[0m [38;5;28;01mif[39;00m maxiter [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m:
[1;32m   1281[0m     maxiter [38;5;241m=[39m [38;5;28mlen[39m(x0) [38;5;241m*[39m [38;5;241m200[39m
[0;32m-> 1283[0m sf [38;5;241m=[39m [43m_prepare_scalar_function[49m[43m([49m[43mfun[49m[43m,[49m[43m [49m[43mx0[49m[43m,[49m[43m [49m[43mjac[49m[43m,[49m[43m [49m[43margs[49m[38;5;241;43m=[39;49m[43margs[49m[43m,[49m[43m [49m[43mepsilon[49m[38;5;241;43m=[39;49m[43meps[49m[43m,[49m
[1;32m   1284[0m [43m                              [49m[43mfinite_diff_rel_step[49m[38;5;241;43m=[39;49m[43mfinite_diff_rel_step[49m[43m)[49m
[1;32m   1286[0m f [38;5;241m=[39m sf[38;5;241m.[39mfun
[1;32m   1287[0m myfprime [38;5;241m=[39m sf[38;5;241m.[39mgrad

File [0;32m/opt/conda/lib/python3.9/site-packages/scipy/optimize/_optimize.py:263[0m, in [0;36m_prepare_scalar_function[0;34m(fun, x0, jac, args, bounds, epsilon, finite_diff_rel_step, hess)[0m
[1;32m    259[0m     bounds [38;5;241m=[39m ([38;5;241m-[39mnp[38;5;241m.[39minf, np[38;5;241m.[39minf)
[1;32m    261[0m [38;5;66;03m# ScalarFunction caches. Reuse of fun(x) during grad[39;00m
[1;32m    262[0m [38;5;66;03m# calculation reduces overall function evaluations.[39;00m
[0;32m--> 263[0m sf [38;5;241m=[39m [43mScalarFunction[49m[43m([49m[43mfun[49m[43m,[49m[43m [49m[43mx0[49m[43m,[49m[43m [49m[43margs[49m[43m,[49m[43m [49m[43mgrad[49m[43m,[49m[43m [49m[43mhess[49m[43m,[49m
[1;32m    264[0m [43m                    [49m[43mfinite_diff_rel_step[49m[43m,[49m[43m [49m[43mbounds[49m[43m,[49m[43m [49m[43mepsilon[49m[38;5;241;43m=[39;49m[43mepsilon[49m[43m)[49m
[1;32m    266[0m [38;5;28;01mreturn[39;00m sf

File [0;32m/opt/conda/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py:158[0m, in [0;36mScalarFunction.__init__[0;34m(self, fun, x0, args, grad, hess, finite_diff_rel_step, finite_diff_bounds, epsilon)[0m
[1;32m    155[0m     [38;5;28mself[39m[38;5;241m.[39mf [38;5;241m=[39m fun_wrapped([38;5;28mself[39m[38;5;241m.[39mx)
[1;32m    157[0m [38;5;28mself[39m[38;5;241m.[39m_update_fun_impl [38;5;241m=[39m update_fun
[0;32m--> 158[0m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_update_fun[49m[43m([49m[43m)[49m
[1;32m    160[0m [38;5;66;03m# Gradient evaluation[39;00m
[1;32m    161[0m [38;5;28;01mif[39;00m callable(grad):

File [0;32m/opt/conda/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py:251[0m, in [0;36mScalarFunction._update_fun[0;34m(self)[0m
[1;32m    249[0m [38;5;28;01mdef[39;00m [38;5;21m_update_fun[39m([38;5;28mself[39m):
[1;32m    250[0m     [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m [38;5;28mself[39m[38;5;241m.[39mf_updated:
[0;32m--> 251[0m         [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_update_fun_impl[49m[43m([49m[43m)[49m
[1;32m    252[0m         [38;5;28mself[39m[38;5;241m.[39mf_updated [38;5;241m=[39m [38;5;28;01mTrue[39;00m

File [0;32m/opt/conda/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py:155[0m, in [0;36mScalarFunction.__init__.<locals>.update_fun[0;34m()[0m
[1;32m    154[0m [38;5;28;01mdef[39;00m [38;5;21mupdate_fun[39m():
[0;32m--> 155[0m     [38;5;28mself[39m[38;5;241m.[39mf [38;5;241m=[39m [43mfun_wrapped[49m[43m([49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mx[49m[43m)[49m

File [0;32m/opt/conda/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py:143[0m, in [0;36mScalarFunction.__init__.<locals>.fun_wrapped[0;34m(x)[0m
[1;32m    141[0m         fx [38;5;241m=[39m np[38;5;241m.[39masarray(fx)[38;5;241m.[39mitem()
[1;32m    142[0m     [38;5;28;01mexcept[39;00m ([38;5;167;01mTypeError[39;00m, [38;5;167;01mValueError[39;00m) [38;5;28;01mas[39;00m e:
[0;32m--> 143[0m         [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m(
[1;32m    144[0m             [38;5;124m"[39m[38;5;124mThe user-provided objective function [39m[38;5;124m"[39m
[1;32m    145[0m             [38;5;124m"[39m[38;5;124mmust return a scalar value.[39m[38;5;124m"[39m
[1;32m    146[0m         ) [38;5;28;01mfrom[39;00m [38;5;21;01me[39;00m
[1;32m    148[0m [38;5;28;01mif[39;00m fx [38;5;241m<[39m [38;5;28mself[39m[38;5;241m.[39m_lowest_f:
[1;32m    149[0m     [38;5;28mself[39m[38;5;241m.[39m_lowest_x [38;5;241m=[39m x

[0;31mValueError[0m: The user-provided objective function must return a scalar value.
ValueError: The user-provided objective function must return a scalar value.

